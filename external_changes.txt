This file tracks changes required outside of the FAURO project directories in order for things to work smoothly for our specific implementation.

1. /home/snow/fprime_fauro/fauro_project/fprime-arduino/Arduino/ArduinoTime/ArduinoTime.cpp

Change contents of timeGetPort_handler to the following. The previous code incorrectly set usec.
time_t sec = now();
U32 usec = (millis() % 1000)*1000;
time.set(sec, usec);

2. /home/snow/fprime_fauro/fprime-venv/lib/python3.10/site-packages/fprime_gds/common/decoders/ch_decoder.py

Make the following changes to allow the GDS to auto-report at the start of each boot what the unix boot time was. This can, in turn, but used with the TIME_SET command so FAURO can report correct unix time with telemetry instead of time since boot.
    a. add import time
    b. add the attributes self.boot_epoch_reported = False and self.last_channel_time = 0 in class init function
    c. add the following code block inside the while loop of the decode_api function after the line "ch_list.append(ChData(val_obj, ch_time, ch_temp))"
        raw_time = ch_list[-1].get_time()
        raw_time = raw_time[raw_time.find("-")+1:]
        raw_time = raw_time[:raw_time.find(")")]
        time_since_boot = raw_time.replace(":", ".")
        time_since_boot = float(time_since_boot)
        if (self.last_channel_time > time_since_boot+1):
            self.boot_epoch_reported = False
        if self.boot_epoch_reported == False:
            boot_time = time.time() - time_since_boot
            print("Use the following time for the TIME_SET command to properly set the epoch time of boot: ")
            print(int(boot_time))
            self.boot_epoch_reported = True
        self.last_channel_time = time_since_boot

3. To make the FSW reset command, /home/snow/fprime_fauro/fauro_project/fprime/Svc/FatalHandler/FatalHandlerComponentBaremetalImpl.cpp was changed to have:

#include <Arduino.h>
#include <delay.h>
#define RESET_PIN (12)

namespace Svc {

    // ----------------------------------------------------------------------
    // Handler implementations for user-defined typed input ports
    // ----------------------------------------------------------------------

    void FatalHandlerComponentImpl::FatalReceive_handler(
            const NATIVE_INT_TYPE portNum,
            FwEventIdType Id) {
        // for **nix, delay then exit with error code
        Os::Log::logMsg("FATAL %d handled.\n",Id,0,0,0,0,0);
        digitalWrite(RESET_PIN, HIGH);
        pinMode(RESET_PIN, OUTPUT);
        Os::Log::logMsg("Goodnight.\n",0,0,0,0,0,0);
        delay(100);
        digitalWrite(RESET_PIN, LOW);
        while (true) {} // Returning might be bad
    }

} // end namespace Svc

4. Note: If you need to improve fatal logging do this in /home/snow/fprime_fauro/fauro_project/fprime/Svc/AssertFatalAdapter/AssertFatalAdapterComponentImpl.cpp
//snow
#include <Os/Log.hpp>

//in reportAssert right before the switch statement
POINTER_CAST pfile = reinterpret_cast<POINTER_CAST>(file);
Os::Log::logMsg("ASSERT: \"%s\": Line: %d %d\n", pfile, lineNo, arg1);

5. Have to make the contents of "void FswManagerComponentBase :: loadParameters()" to the following until a custom prmdb is developed 

//Simplified load process since there is no prmDB
this->m_paramLock.lock();
this->m_param_SYS_MODE_valid = Fw::ParamValid::DEFAULT;
this->m_SYS_MODE = Components::FswManager_SYS_MODE_ENUM::STARTUP;
this->m_paramLock.unLock();
this->parametersLoaded();

6. And to GNC parameters in GncManagerComponentBase

//Simplified load process since there is no prmDB
this->m_paramLock.lock();
this->m_param_ALTIMETER_SETTING_valid = Fw::ParamValid::DEFAULT;
this->m_ALTIMETER_SETTING = 1013.2075;
this->m_paramLock.unLock();
this->parametersLoaded();